# -*- coding:utf-8 -*-
"""
---------------------------------------------------------知识点---------------------------------------------------------
"""

"""
-----------------------------基础知识----------------------------
变量：
- 在单一程序内，要求缩进的长度是相同的，并没有规定必须是四个空格，还是Tab键
- 变量采用标识符（名字）来表示，关联标识符的过程叫命名
- 可以使用等号（=）向变量赋值或修改值，=被称为赋值符号

命名：关联标识符的过程
- 命名规则：大小写字母、数字、下划线和汉字等字符及组合
- 注意事项：大小写敏感、首字符不能是数字、不能与保留字相同

保留字：被编程语言内部定义并保留使用的标识符
- Python语言有33个保留字（也叫关键字）
- 保留字是编程语言的基本单词，大小写敏感

数据类型：供计算机程序理解的数据形式
- 整数类型：1001110
- 字符串类型："10,011,10"
- 列表类型：[10, 011, 10]

- 字符串
    -- 由0个或多个字符组成的有序字符序列
    -- 字符串是字符的有序序列，可以对其中的字符进行索引（编号从0开始）
    -- 字符串的序号
        ---- 正向递增序号 和 反向递减序号
            -12 -11 -10  -9   -8  -7   -6   -5   -4  -3   -2  -1    （反向）
             请  输   入   带   有   符   号   的   温   度   值   ：
             0   1    2    3   4    5   6    7    8   9   10  11     （正向）
    -- 字符串的使用：使用[]获取字符串中的一个或多个字符
        ---- 索引：返回字符串中的单个字符 <字符串>[M]
        ---- 切片：返回字符串中的一段字符串 <字符串>[M:N]

print()输出标准化：以字符形式向控制台输出结果的函数
- 格式化
    -- {}表示槽，后续变量会填充到槽内
    -- {:.2f}表示将变量填充到这个位置时取小数点后两位
    -- 例：print("转换后的温度是{:.2f}C".format(变量))
    
eval(): 去掉参数最外侧引号并执行余下语句的函数
- eval(<字符串或字符串变量>) 
- 例：eval("1")   eval("1+2")    eval('"1+2"')    eval("print('Hello World!')")   

"""

"""
-----------------------------标准库----------------------------
python标准库：python计算生态 = 标准库 + 第三方库
- 标准库：随解释器直接安装到操作系统中的功能模块
- 第三方库：需要经过安装才能使用的功能模块
- 库Library、包Package、模块Module，统称模块
"""

"""
-----------------------------数据类型----------------------------
整数类型：与数学中的整数概念一致
- 可正可负，没有取值范围限制
- pow(x, y)函数：计算x的y次幂，想算多大算多大
- 四种进制表示形式：
    -- 十进制：1010，99，-217
    -- 二进制，以0b或0B开头：0b010，-0B101
    -- 八进制，以0o或0O开头：0o123，-0O456
    -- 十六进制，以0x或oX开头：0x9a，-0X89

浮点类型：与数学中的实数概念一致
- 带有小数点及小数的数字
- 浮点数取值范围和小数精度都存在限制，但常规计算可忽略
- 取值范围数量级约(-10)^308至(10)^308，精度数量级(10)^16
- 浮点数间运算存在不确定尾数，不是bug
    -- 例如：0.1+0.3 = 0.4 ； 0.1+0.2 = 0.30000000000000004(存在不确定尾数)
    -- 数值在计算机中是以二进制的形式保存的
       0.1          53位二进制表示小数部分，约(10)^-16
       0.00011001100110011001100110011001100110011001100110011010   （二进制表示） 
       0.1000000000000000055511151231257827021181583404541015625    （十进制表示）
            二进制表示小数，可以无限接近，但不完全相同
- round(x, d)：对x四舍五入，d是小数截取位数
- 浮点数间运算及比较用round()函数辅助
- 不确定尾数一般发生在(10)^-16左右，round()十分有效

字符串：由0个或多个字符组成的有序字符序列
- 字符串有2类共4种表示方法
    -- 由一对单引号或双引号表示，仅表示单行字符串
    -- 由一对三单引号或三双引号表示，可表示多行字符串
    -- 如果希望在字符串中包含双引号或单引号呢？
        -- 字符串包含单引号，则建议用双引号表示：例如'这里有个双引号(")'
        -- 字符串包含双引号，则建议用单引号表示：例如"这里有个单引号(')"
- 字符串切片高级用法：使用[M:N:K]根据步长对字符串切片
    -- <字符串>[M: N]，M缺失表示至开头，N缺失表示至结尾
        -- 例如："O一二三四五六七八九十"[:3],结果是"O一二"
    -- <字符串>[M: N: K]，根据步长K对字符串切片
        -- 例如："O一二三四五六七八九十"[0:8:2],结果是"一三五七"
        -- 例如："O一二三四五六七八九十"[::-1],结果是"十九八七六五四三二一O"
-- 字符串的特殊字符：转义符 "\"   
    -- 转义符表达特定字符的本意
        -- 例如：print('say Hi to Bob\'s mother')
        -- 例如：print('Hello there!\nHow are you?\nI \'m doing fine.')
        -- 例如：print("hello \t python")
    -- 当不想让"\"表示转义字符时，可以在其前面加r或\\，其代表原始的字符串
        -- 例如：print(r'Hello there!\nHow are you?\nI \'m doing fine.')
        -- 例如：print("hello \\t python")
-- 字符串的操作符
    -- x+y          连接两个字符串x和y
    -- n*x 或 x*n   复制n次字符串x
    -- x in s       如果x是s的子串，返回True，否则返回False
-- 字符串处理函数
    -- len(x)        返回字符串的长度
    -- str(x)        任意类型x对应的字符串形式
    -- hex(x)或oct(x)        整数x的十六进制或八进制小写形式字符串  
    -- chr(u)        u为unicode编码，返回其对应的字符
    -- ord(x)        x为字符，返回其对应的Unicode编码
-- 字符串处理方法：一些以方法形式提供的字符串处理功能
    -- "方法"特制<a>.<b>()风格中的函数<b>()
    -- 方法本身也是函数，但与<a>有关，<a>.<b>()风格使用
    -- 字符串及变量也是<a>，存在一些方法
    -- str.lower()/str.upper()        返回字符串的副本，全部字符小写/大写
    -- str.split(sep=None)            返回一个列表，由str根据sep被分隔的部分组成
    -- str.count(sub)                 返回子串sub在str中出现的次数
    -- str.replace(old, new)          返回字符串str的副本，所有old子串被替换为new
    -- str.center(width,[,fillchar])  字符串str根据宽度width居中，fillchar可选
    -- str.strip(chars)               从str中去掉在其左侧和右侧chars中列出的字符
    -- str.join(iter)                 在iter变量除最后元素外每个元素后增加一个str,例'-'.join(['a', 'b', 'c'])
-- 字符串类型的格式化：格式化是对字符串进行格式表达的方式
    -- 字符串格式化使用.format()方法，用法：<模板字符串>.format(<逗号分割的参数>)
    -- format()方法的格式控制
        -- 槽内部对格式化的配置方式：{<参数序号>: <格式控制标记>}
        -- :        <填充>        <对齐>        <宽度>        <,>         <.精度>       <类型>
          引导     用于填充的      < 左对齐       槽设定的     数字的千分位    浮点数小数      整数类型
          符号      单个字符       > 右对齐       输出宽度       分隔符       精度或字符串    b,c,d,o,x,X
                                ^ 居中对齐                               最大输出长度    浮点数类型
                                                                                     e,E,f,%
    
Unicode编码：Python字符串的编码方式
    -- 统一字符编码，即覆盖几乎所有字符的编码方式
    -- 从0到1114111（0x10FFFF）空间，每个编码对应一个字符
    -- Python字符串中每个字符都是Unicode编码字符 
"""

"""
-----------------------------time库----------------------------
time库：是Python中处理时间的标准库
    -- 计算机时间的表达
    -- 提供获取系统时间并格式化输出功能
    -- 提供系统级精确计时功能，用于程序性能分析
    -- time库包含三类函数
        -- 时间获取：time()、ctime()、gmtime()
        -- 时间格式化：strftime()、strptime()
        -- 程序计时：sleep()、perf_counter()
        
- 时间获取
    -- time()：获取当前时间戳，即计算机内部时间戳，浮点数
    -- ctime()：获取当前时间并以易读方式表示，返回字符串
    -- gmtime()：获取当前时间，表示为计算机可处理的时间格式
    
- 时间格式化：将时间以合理的方式展示出来
    -- 格式化：类似字符串格式化，需要有展示模板
    -- 展示模板由特定的格式化控制符组成
    -- strftime(tpl, ts)：tpl是格式化模板字符串，用来定义输出结果；ts是计算机内部时间类型变量
        -- %Y：年份 | %m：月份(01-12) | %B：月份名称(January) | %b：月份名称缩写(Apr) | %d：日期(01-31) | %A：星期(Monday-Sunday)
           %a：星期缩写(Mon-Sun) | %H：小时24h制(00-23) | %I：小时12h制(01-12) | %p：上/下午(AM,PM) | %M：分钟(00-59) | %S：秒(00-59)
    -- strptime(str, tpl)：str是字符串形式的时间值；tpl是格式化模板字符串，用来定义输入效果   

-- 程序计时
    -- 程序计时指测量起止动作所经历时间的过程
    -- 测量时间：perf_counter()
        -- 返回一个CPU级别的精确时间计数值，单位为秒，由于这个计数值起点不确定，连续调用差值才有意义
    -- 产生时间：sleep(s)
        -- s拟休眠时间，单位是秒，可以是浮点数
     
"""

"""
---------------------------------------------------------实例---------------------------------------------------------
"""
import time


def unicode_case(n):
    print("unicode编码9800对应的字符是" + chr(9800))
    for i in range(n):
        print(chr(9800 + i), end="")


def str_function():
    print('AbCdEfGh'.lower())
    print("A,B,C".split(","))
    print("an apple a day".count("a"))
    print("python".replace("n", "n123.io"))
    print("python".center(20, "="))
    print("= python= ".strip(" =np"))
    print(",".join("12345"))


def format_case():
    print("{}:计算机{}的CPU占用率为{}%".format("C", "2018-10-10", "10"))
    print("{1}:计算机{0}的CPU占用率为{2}%".format("2018-10-10", "C", "10"))
    print("{0:=^20}".format("PYTHON"))
    print("{0:*>20}".format("BIT"))
    print("{0:10}".format("BIT"))
    print("{0:,.2f}".format(12345.6789))
    print("{0:b},{0:c},{0:d},{0:o},{0:x},{0:X}".format(425))
    print("{0:e},{0:E},{0:f},{0:%}".format(3.14))


def time_case():
    # 时间获取
    print(time.time())
    print(time.ctime())
    print(time.gmtime())

    # 时间格式
    t = time.gmtime()
    print(time.strftime('%Y-%m-%d %H:%M:%S', t))

    timeStr = '2021-04-20 17:04:20'
    print(time.strptime(timeStr, '%Y-%m-%d %H:%M:%S'))

    # 程序计时
    start = time.perf_counter()
    end = time.perf_counter()
    print(end - start)

    def wait():  # 程序将等待3.3秒后再退出
        time.sleep(3.3)


# if __name__ == "__main__":
#     unicode_case(20)
#     str_function()
#     format_case()
#     time_case()

"""
---------------------------------------------------------实例：文本进度条---------------------------------------------------------
"""


# 简单的开始
def Text_Progress_Bar():
    scale = 10
    print("执行开始".center(20, "-"))
    for i in range(scale + 1):
        a = "*" * i
        b = "." * (scale - i)
        c = (i / scale) * 100
        print("{:^3.0f}%[{}->{}]".format(c, a, b))
        time.sleep(0.1)
    print("执行结束".center(20, '-'))


def Text_Progress_Bar_test():
    """
    -- 单行动态刷新
        -- 刷新的本质是：用后打印的字符覆盖之前的字符
        -- 不能换行：print()需要被控制
        -- 要能回退：打印后光标退回到之前的位置\r
    """
    for i in range(101):
        print("\r{:3}%".format(i), end="")
        time.sleep(0.1)


def Text_Progress_Bar_pro():
    scale = 50
    print("执行开始".center(scale // 2, '-'))
    start = time.perf_counter()
    for i in range(scale + 1):
        a = "*" * i
        b = "." * (scale - i)
        c = (i / scale) * 100
        dur = time.perf_counter() - start
        print("\r{:3.0f}%[{}->{}]{:.2f}s".format(c, a, b, dur), end="")
        time.sleep(0.1)
    print("\n" + "执行结束".center(scale // 2, '-'))


if __name__ == "__main__":
    # Text_Progress_Bar()
    # Text_Progress_Bar_test()
    Text_Progress_Bar_pro()
