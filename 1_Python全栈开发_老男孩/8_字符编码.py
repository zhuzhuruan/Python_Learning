# -*- coding:utf-8 -*-
"""
-------------------------------------------------字符编码-------------------------------------------------
一、字符编码发展史
1、阶段一：ASCII表
（1）只支持英文字符
（2）采用8位二进制数对应一个英文字符

2、阶段二：为了让计算机识别英文和中文，中国人产生了GBK、日本人产生了Shift_JIS、韩国人产生了Euc-kr
（1）GBK
    （a）支持英文字符串、中文字符
    （b）采用8位二进制数对应一个英文字符、16位二进制数对应一个中文字符
（2）Shift_JIS
    （a）只有日文字符、英文字符和数字一一对应关系
（3）Euc-kr
    （a)只有韩文字符、英文字符和数字一一对应关系

3、阶段三：所有国家都可以用的编码于是产生了unicode
（1）兼容所有国家的字符
（2）采用16位（16bit=2bytes）二进制数对应一个字符，个别生僻字会采用4bytes、8bytes
（3）与其他字符编码存在对应关系：很多地方或者老的系统，应用软件中会采用各种各样传统的编码，这是历史遗留问题。此处需要强调：软件是存放于硬盘中的，而运行软件是要将
                           软件加载到内存中，面对硬盘中存放的各种传统编码的软件，想让计算机能够将他们全部正常运行而不出现乱码，内存中必须有一种兼容的编码，并
                           且该编码需要与其他编码有相对应的映射/转换关系，这是unicode的第二大特点产生的缘由

4、阶段四：由于unicode中每个字符都是2bytes,严重影响了内存到硬盘的加载速度，因此产生了utf-8
（1）utf-8(Unicode Transformation Format-8): 针对Unicode的一种可变长字符编码
（2）例如：英文 ->>>> 1bytes ; 中文 ->>>> 3bytes

5、总结
    文本编辑器输入任何字符都是最先存在于内存中，是unicode编码的，存放于硬盘中，则可以转换成任意其他编码，只要该编码可以支持相应的字符
（1）内存固定使用Unicode编码形式，不能改变，可以改变的是存入硬盘采用的格式
            输入                   内存                  硬盘
         英文+汉字                Unicode                GBK
         英文+日文                Unicode                Shift_JIS
         所有字符                 Unicode                UTF-8

（2）文本文件存取出现的乱码问题
        存乱了：编码格式应该设置成支持文件内字符串的格式（目前最合理的是存成utf-8）
        取乱了：文件以什么编码格式存入硬盘的，就以什么编码格式取出来

（3）coding: 当初文件写入硬盘时采用的编码格式
    python解释器修改默认编码：-*- coding:utf-8 -*-
，

二、编码和解码
1、编码：由字符转换成内存中的unicode,以及由unicode转换成其他编码的过程，都称为编码encode
2、解码：由内存中的unicode转换成字符，以及由其他编码转换成unicode的过程,都称为解码decode
        x = '上'         # 在python3中字符串的赋值都是unicode
        res = x.encode('gbk')       # 将unicode转换为gbk
        res_new = res.decode('gbk')         # 将gbk转换为unicode

注意：str.encode('utf-8') 等同于 bytes(str, encoding='utf-8')

"""


with open('练习文件\\文件的使用.txt', 'a+t', encoding='utf-8') as f:
    f.write('赵二:524')
