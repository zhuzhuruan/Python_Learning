# -*- coding:utf-8 -*-
""""""
"""
-------------------------------------------------模块-------------------------------------------------
一、什么是模块
1、定义：模块就是一系列功能的集合体
        在Python中，一个py文件就是一个模块，文件名为xxx.py模块名则是xxx,导入模块可以引用模块中已经写好的功能。   

2、来源
    （1）内置模块
    （2）第三方模块
    （3）自定义模块

3、分类
    （1）使用纯Python代码编写的py文件
    （2）已被编译为共享库或DDL的C或C++扩展
    （3）把一系列模块组织到一起的文件夹（注：文件夹下有一个__init__.py文件，该文件夹称之为包）
    （4）使用C编写并链接到Python解释器中的内置模块


二、为什么要有模块
    1、内置模块和第三方模块拿来就用，无需定义，拿来主义，可以极大地提升开发效率
    2、可以将程序的部分功能提取出来放到模块中共享使用，可以减少代码冗余
    
    
三、如何使用模块（以foo模块为例）
1、首次导入模块发生的三件事
    （1）执行foo.py文件
    （2）产生foo.py的名称空间，将foo.py运行过程中产生的名字都丢到foo的名称空间中
    （3）在当前文件中产生一个名字为foo,改名字指向（2）中产生的名称空间
   之后再导入模块，都是直接引用首次导入的foo.py的名称空间，不会重复执行代码 
    
2、引用
    （1）模块名.函数名：指名道姓的像某个模块要某个功能，不会与当前的名称空间中的名字发生冲突    
    
                import 练习文件.foo
                print(练习文件.foo.x)
                print(练习文件.foo.get)
                print(练习文件.foo.change)
    
    （2）无论是查看还是修改都是模块本身（定义阶段），与调用位置无关
                import 练习文件.foo
                x = 1111
                练习文件.foo.get()       # 打印的x是模块中定义的x
                
                练习文件.foo.change()   
                print(练习文件.foo.x)    # 模块中的x被修改
                print(x)                
                  
    （3）可以以逗号为分隔符导入多个模块（不建议）
    
    （4）导入模块的规范：导入先后顺序
            <1> Python内置模块
            <2> 第三方模块
            <3> 自定义模块          
            
    （5）import ... as ...:可以为导入的模块定义别名
            import 练习文件.foo as test
            
    （6）自定义模块的命名应该采用纯小写+下划线的风格    
    
    （7）可以在函数内导入模块
        def func():
            import ...
          
          
          
-------------------------------------------------python文件的两种用途-------------------------------------------------
 # 两种用途
        # 作为程序运行
        # 作为模块导入       
          
# 案例理解: run.py、foo.py

            模块foo的名称空间                      run.py程序的名称空间
          ----------------------              ------------------------      
          ¦    x -> 内存地址     ¦              ¦     x -> 内存地址     ¦
          ¦                    ¦              ¦                      ¦
          ¦   get -> 内存地址    ¦ <------------¦--------foo           ¦
          ¦                    ¦              ¦                      ¦
          ¦  change -> 内存地址  ¦              ¦                      ¦
          ¦                    ¦               ¦                     ¦
          ¦                    ¦               ¦                     ¦
          ---------------------                ----------------------- 

# 当py文件作为模块使用前，它本身也是一个可以作为程序执行的文件，例如foo.py中"get()和change()"有这两行代码，执行foo.py就可以把它作为程序直接用
  当它作为模块使用时，import foo这一步首先就要执行foo文件，但是当foo文件是作为模块导入使用时，并不希望执行文件中的调用代码，如何实现呢？
  
  直接执行foo.py文件，__name__的值是__main__
  import foo，__name__的值是模块名foo
  所以在foo.py文件中，调用代码可以写成：
        if __name__ == '__main__':      # 直接执行foo要做的事情
            get()
            change()
        else:                           # 作为模块导入要做的事情(省略不写)
            pass
            
  
        
                             
"""
