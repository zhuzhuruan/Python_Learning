# -*- coding:utf-8 -*-
""""""
"""
-------------------------------------------------名称空间和作用域-------------------------------------------------
一、名称空间（namespace）
1、定义：命名空间是从名称到对象的映射，大部分的命名空间都是通过python字典来实现的。命名空间提供了在项目中避免名字冲突的一种方法。各个命名空间是独立的，
       没有任何关系的，所以在一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响。
       通俗的说，名称空间就是对存放变量名和变量地址的栈区进行划分，类似于文件夹的定义。
       
                        =======栈区======                      =======堆区======
                           
                            内置名称
                        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                        ▎print()        ▎
                        ▎abs()          ▎
                        ▎...            ▎
                        ▎▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▍
                        
                             全局名称   
                        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                        ▎func()         ▎
                        ▎class()        ▎
                        ▎               ▎
                        ▎▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▍
                
                             局部名称
                        ▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁
                        ▎...            ▎
                        ▎   x           ▎
                        ▎   y           ▎
                        ▎▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▍

2、分类
（1）内置名称(built-in names): python语言内置的名称，比如函数名abs,char和异常名称BaseException、Exception等
    1）存活周期：python解释器启动就产生，关闭就销毁
    
（2）全局名称(global names): 模块中定义的名称，记录了模块的变量，包括函数、类、其他导入的模块、模块级的变量和常量
    1）存活周期：python文件执行时产生，执行结束则销毁
    
（3）局部名称(local names): 函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量（类中定义也是）
    1）存活周期：在函数调用过程中产生，函数调用结束则销毁

注：命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束。

3、顺序
（1）加载顺序：内置命名空间 -> 全局命名空间 -> 局部命名空间
（2）销毁顺序：局部命名空间 -> 全局命名空间 -> 内置命名空间
（3）查找顺序：从当前所在位置向上一层一层查找
        1）当前在局部命名空间
            局部命名空间 -> 全局命名空间 -> 内置命名空间
            input = 'aaa'
            def func():
                input = 'bbb'
                print(input)        # 目前处于局部命名空间，先找局部，当局部被注释，找全局，全局被注释，找内置
            func()
                
        2）当前在全局命名空间
            全局命名空间 -> 内置命名空间
            input = 'aaa'
            def func():
                input = 'bbb'
            func()
            print(input)        # 目前处于全局命名空间，先找全局，全局被注释，找内置
            
（4）命名空间的“嵌套”关系是以函数定义阶段为准的，与调用位置无关
        x = 'aaa'
        def func():
            print(x)
        
        def foo():
            x = 'bbb'
            func()      # 调用函数时，回到函数的定义阶段，再查找命名空间
        
        foo()
    
    例如：函数嵌套定义:
            input = 'aaa'
            
            def func1():
                input = 'bbb'
                def func2():
                    input = 'ccc'
                    print(input)
                func2()
            
            func1()
                    

二、作用域
1、定义：作用域就是一个Python程序可以直接访问命名空间的正文区域。在一个Python程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则
        会报未定义的错误。
    
2、分类：
    （1）L(Local): 最内层，包含局部变量，比如一个函数/方法内部
    （2）E(Enclosing): 包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类）A里面又包含了一个函数B，那么对于
                      B中的名称来说A中的作用域就为nonlocal
    （3）G(Global): 当前脚本的最外层，比如当前模块的全局变量
    （4）B(Built-in): 包含了内建的变量/关键字等，最后被搜索
            
            # built-in
            # global
            def func1():
                # enclosing
                def func2():
                    # local
                    pass
                    
三、全局变量和局部变量
1、定义：定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域
       局部变量只能在声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中
       
       x = 'aaa'        # 全局变量
       def func():
           x = 'bbb'        # 局部变量
           pass
       
2、global和nonlocal关键字：当内部作用域想修改外部作用域的变量时，就需要用到global和nonlocal关键字
（1）修改全局变量
        # 未使用global关键字
        x = 'aaa'
        def func():
            x = 'bbb'
            print('局部变量x:{}'.format(x))
        
        func()
        print('全局变量x:{}'.format(x))    
        
        # 使用global关键字
        x = 'aaa'
        def func():
            global x
            x = 'bbb'
            print('局部变量x:{}'.format(x))
        
        func()
        print('全局变量x:{}'.format(x))    

（2）修改嵌套作用域（Enclosing作用域，外层非局部作用域）中的变量则需要使用nonlocal关键字
        # 未使用nonlocal关键字
        x = 'aaa'
        
        def func1():
            x = 'bbb'
        
            def func2():
                x = 'ccc'
                print('局部变量x:{}'.format(x))
        
            func2()
            print('外层非局部变量x:{}'.format(x))
        
        
        func1()
        print('全局变量x:{}'.format(x))
        
        
        # 使用nonlocal关键字
        x = 'aaa'
        
        def func1():
            x = 'bbb'
        
            def func2():
                nonlocal x
                x = 'ccc'
                print('局部变量x:{}'.format(x))
        
            func2()
            print('外层非局部变量x:{}'.format(x))
        
        
        func1()
        print('全局变量x:{}'.format(x))

        
            
"""

